"""add rental agreement and state

Revision ID: fc8e98a4774d
Revises: 3fdf2e94303a
Create Date: 2024-01-03 16:14:31.836704

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "fc8e98a4774d"
down_revision = "3fdf2e94303a"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "states",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "desired",
            postgresql.ENUM("Active", "Inactive", name="desiredstateenum"),
            nullable=False,
        ),
        sa.Column(
            "actual",
            postgresql.ENUM(
                "Created",
                "Activating",
                "Activated",
                "Deactivating",
                "Deactivated",
                name="actualstateenum",
            ),
            nullable=False,
        ),
        sa.Column("error", sa.String(), nullable=True),
        sa.Column(
            "status",
            postgresql.ENUM("OK", "Reconciling", "Error", name="statusenum"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "rental_agreement",
        sa.Column("id", sa.String(length=63), nullable=False),
        sa.Column("external_id", sa.String(), nullable=True),
        sa.Column("organization_id", sa.Integer(), nullable=False),
        sa.Column("tenant_id", sa.String(), nullable=False),
        sa.Column("rental_unit_id", sa.String(), nullable=False),
        sa.Column("start_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("end_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("state", sa.Uuid(), nullable=True),
        sa.CheckConstraint(
            "id ~* '^[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?$'",
            name="id_format_check",
        ),
        sa.ForeignKeyConstraint(
            ["rental_unit_id", "organization_id"],
            ["rental_unit.id", "rental_unit.organization_id"],
        ),
        sa.ForeignKeyConstraint(
            ["state"],
            ["states.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id", "organization_id"],
            ["tenants.id", "tenants.organization_id"],
        ),
        sa.PrimaryKeyConstraint("id", "organization_id"),
        sa.UniqueConstraint("external_id", "organization_id"),
        sa.UniqueConstraint("id", "organization_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("rental_agreement")
    op.drop_table("states")
    # Drop the enum types
    op.execute("DROP TYPE IF EXISTS desiredstateenum;")
    op.execute("DROP TYPE IF EXISTS actualstateenum;")
    op.execute("DROP TYPE IF EXISTS statusenum;")
    # ### end Alembic commands ###
